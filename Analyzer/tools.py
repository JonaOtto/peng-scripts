"""
Runs for Performance Engineering:

### Compiler Vectorization Report ###
Reports which loop in the code was vectorized (unfolded) and which not. 
Loops not being able to be vectorized can cause hugh performance lacks.
Usage: 
GCC: 
1. Enable optimization with flag -O2 or -O3 
2. Enable vectorization with flag -ftree-vectorize
3. Pipe outputs to files: 
successful with -fopt-info-vec-optimized=vec.opt, 
unsuccessful: -fopt-info-vec-missed=vec.miss
or all: -fopt-info-vec-all=vec.all
Result:
The file that will be piped in holds some information about the code lines with loops,
and states if they where vectorized or not.
Note: There is the same thing for the intel compilers, which we do not use.

### GProf ###
Hotspot detection with timings and everything. Also call graph inspections. 
Uses a mixture of instrumentation and sampling.
Usage: gprof BIN_NAME > gprof.profile, will pipe a GProf profile into specified file. 
This file can be read, or viewed with the gprof GUI (https://www.ulfdittmer.com/profileviewer/).

### Valgrind ###
Tool-suite: callgrind, cachegrind, massif, ...
callgrind: Call graph inspection, number of calls, ...
cachegrind: First and last level cache statistics. Use to check how good the cache usage is.
massif: inspect heap memory. 
Usage: valgrind –tool=[tools] [opts] program [args]

### Intel vTune ###
Commercial tool: Like valgrind but fancy. Advanced Hotspot analysis, capable of MPI, OpenMP, ...
Load with module load intel, run: vtune-gui (ssh X-Forwarding!)
Usage: Use the gui to start your application. See results right there.

### Score-P ###

Usage: Put "scorep" in front of your compile commands. This generates a "profile",
or a "trace-set" if you enable SCOREP_ENABLE_TRACING.
You can view traces (otf2) with vampir or scalasca, and profiles (cube) with CUBE. 
Caution: Traces are getting VERY LARGE very fast! (SCRATCH!)
Use "scorep-score" to get an estimation on trace file size.

### PAPI ###
Library for checking hardware counters. Specific on processor. Check with 
"papi-avail" which hardware counters can be read. Hardware counters may not be reliable.
Can be used for many things, like cache miss counts, ...
Usage: Papi events can be recorded by Score-P and the HPC Toolkit. 

### Cube ###
Inspection GUI for files of the cube4 format, as generated by e.g. Score-P.
Select a metric, look at the corresponding hierarchy.

### Extra-P ###
Perform a empirical modelling over a set of cube files. You need min 5. measurement points,
which are repeated min 3 times. 
Files and folders with the cubes need to be named in a specify way.
Usage: ?

### HPC Toolkit ###
The open version of vTune. 
Usage: Download, compile and install via Spack PM. "hpcrun ./PROGRAM [args]"
Sampling events are based on regular interrupts of the program: e.g. –e PAPI_TOT_CYC@1000000.
After execution build measurement db with "hpcstruct PROGRAM". Use "hpcviewer" to view the results.

"""
"""

Performance lacks may be:
- reduce work
- minimize processor work
- distribute work and data for optimal parallelization
- avoid slow data paths
- use most effective execution units on chip
- avoid bottlenecks

- hotspots
- not unrolled loops
- cache misses / matrix architecture
- ...

"""

